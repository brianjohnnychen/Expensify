console.log("App.js is running!")

const app = {
    title: "Indecision App",
    subtitle: "Put your life in the hands of a computer",
    options: []
}

// Reference this function, not call it.
// Calling the function will immediately call and get the return value which is undefined.
// Referencing does not execute function until submission is deired.
const onFormSubmit = (e) => {
    // preventDefault() prevents the entire page refresh
    e.preventDefault()
    const userInput = e.target.elements.option.value
    if(userInput) {
        app.options.push(userInput)
        e.target.elements.option.value = ""
        console.log("Form submitted.")
        renderApp()
    }
}

const onMakeDecision = () => {
    const randomNum = Math.floor(Math.random() * app.options.length)
    const option = app.options[randomNum]
    alert(option)
    console.log(randomNum)
}

const resetForm = () => {
    app.options = []
    console.log("Form cleared")
    renderApp()
}

const appRoot = document.getElementById("app")

const renderApp = () => {
    const template = (
        <div>
            <h1>{app.title}</h1>
            {app.subtitle && <p>{app.subtitle}</p>}
            <p>{app.options.length > 0 ? "Here are your options: " : "There are no options"}</p>
            <button disabled={app.options.length === 0} onClick={onMakeDecision}>What should I do?</button>
            <button onClick={resetForm}>Reset Form</button>
            <ol>
                {
                    app.options.map((option) => {
                        console.log("Option added.")
                        return <li key={option}>{option}</li>
                    })
                }
            </ol>
            <form onSubmit={onFormSubmit}>
                <input type="text" name="option"></input>
                <button>Add Option</button>
            </form>
        </div>
    )
    ReactDOM.render(template, appRoot)
}

renderApp()





// JSX - JavaScript XML
// index.html is the website itself
// app.js in the src folder is the JSX code
// app.js in the scripts folder is the Babel compiled native JS
// app.js in the scripts is what the index.html is going to use
// package.json is generated by (npm/yarn init) - 
/*
    All npm packages contain a file, usually in the project root, called package.json - 
    this file holds various metadata relevant to the project. 
    This file is used to give information to npm that allows it to identify the project as well as handle the project's dependencies. 
    It can also contain other metadata such as a project description, 
    the version of the project in a particular distribution, license information, even configuration data - 
    all of which can be vital to both npm and to the end users of the package.
*/
// node_modules is auto-generated, containing the dependencies specified in package.json
// if node_modules is deleted, can be reinstalled using npm/yarn install
// package-lock.json (generated by npm install)
/*
    package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. 
    It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, 
    regardless of intermediate dependency updates.
*/
// yarn.lock (generated by yarn install) - should only have either this or package-lock.json. Delete the other one if have two.
// babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch
